#! /bin/bash
#################################################################################################
#
#    Bash Script for Parallel Open MP execution of the MCE / CCS program            C. Symonds
#
#    To run, you must give three arguments at execution:
#       1) The number of repeats
#       2) The number of parallel threads per folder/node (max 8)
#       3) The number of folders/nodes
#
#    As there are module load commands, the script must be run as source if running on ARC1/ARC2/POLARIS
#    This means that for a run of 128 repeats using 8 cores per node and 4 nodes, the execution
#    command would be:
#
#    source ./run.sh 128 8 4 for ARC, or
#
#    ./run.sh 128 8 4 elsewhere
#
#    For portability the program is compiled using gfortran when not on ARC1, ARC2 or POLARIS. 
#    As such, any changes made to the program should take this into account and endevour to 
#    utilise intrinsic functions rather than intel specific or GNU specific extensions where 
#    possible. PGf95 is not supported for compilation.
#
#    Due to the nature of Shared Memory environments, the execution of the program is split 
#    into separate folders, each one containing a separate executable file which runs on a
#    number of parallel threads defined in argument 2. Since on arc1 there are 8 cores per node,
#    this number of parallel threads is limited to a maximum of 8. Parallel execution is carried
#    out through the repeat running of the basis set propagation. As such, argument 1 (the total
#    number of repeats) must be equal to an integer multiple of 2 * threads * folders. The factor
#    of 2 originates from the propagation of a basis set followed by proagation of the complex
#    conjugate of that basis set. If however conjugate propagation is not needed, comment out lines
#    56-57 and uncomment lines 58-59 to remove the unnecessary factor of two. If gnuplot is present
#    on the computer then a set of graphs are created through the automatic creation and execution
#    of gnuplot scripts. These scripts, and the data being plotted, are generated by the avrgpops.out
#    executable file, and different plots can be generated through changing the source file of the 
#    same name. Each running of this script recompiles the program. 
#
#    If you are running with a precalculated set of basis sets, put the output files from the
#    basis set calculation in the run folder before execution and conjugate propagation should
#    be disabled.
#
#################################################################################################

#This section checks the input arguments for errors.

grep -i "Conjugate_Repeats YES" input.dat > /dev/null
CRchk=$?
if [[ $# -ne 3 ]]; then
 echo "Error: Need to supply the number of repeats,the number of threads and the number of folders as arguments"
 exit 1
elif [[ "`echo $1 | egrep ^[[:digit:]]+$`" = "" ]]; then  # checks for integer
 echo "Number of runs must be an integer"
 exit 1
elif [[ "`echo $2 | egrep ^[[:digit:]]+$`" = "" ]]; then  # checks for integer
 echo "Number of nodes must be an integer"
 exit 1
elif [[ "`echo $3 | egrep ^[[:digit:]]+$`" = "" ]]; then  # checks for integer
 echo "Number of folders must be an integer"
 exit 1
elif [[ $1 -lt 1 ]]; then
 echo "Not enough runs selected. Must be 2 or greater"
 exit 1
elif [[ $2 -lt 1 ]]; then
 echo "Not enough threads selected. Must be 1 or greater"
 exit 1
elif [[ $2 -gt 8 ]]; then
 echo "Too many threads selected. Maximum of 8 available"
 exit 1
elif [[ $3 -lt 1 ]]; then
 echo "Not enough folders selected. Must be 1 or greater"
 exit 1
#elif [[ $3 -gt 100 ]]; then
# echo "Too many folders! Maximum of 100 simultaneous job submissions allowed!"
# exit 1
elif [[ $(( $1/$3 )) -ge 500 ]]; then
 echo "Too many repeats per folder! Must be less than 500!"
 exit 1
elif [[ $(( $1%(2*$2*$3) )) -ne 0 && $CRchk == 0 ]]; then
 echo "Number of repeats must be an integer multiple of 2 * cores * folders for conjugate repetition. Check input.dat"
 echo "CRchk = $CRchk and the factor is $[2*$2*$3]"
 exit 1
elif [[ $(( $1%($2*$3) )) -ne 0 ]]; then
 echo "Number of repeats must be an integer multiple of cores * folders"
 exit 1
#elif [[ $(( $2*$3 )) -gt 100 ]]; then
# echo "Total number of cores should stay below 100 unless you want to wait over a week"
# exit 1
else
 echo "Arguments checked"
 if [[ -n $( echo $HOSTNAME | fgrep -e "arc1" -e "polaris" -e "arc2" ) ]]; then HPCFLG=1; else HPCFLG=0; fi
 if [[ $HPCFLG -eq 1 ]]; then module load mkl; fi    # module loads for HPC systems
 echo "Running Starting"
fi

REPS=$(( $1/$3 ))     # number of repeats per folder
CORES=$2
FOLDERS=$3
RUNF=$PWD   # run folder
if [[ -d ../build ]]; then
 cd ../build
 BUILD=$PWD
 cd $RUNF
else
 echo ""
 echo ""
 echo ""
 echo "No build folder!"
 echo ""
 echo ""
 echo ""
 echo "What's going on?"
 echo ""
 echo ""
 echo ""
 echo "I'm scared."
 echo ""
 echo ""
 echo ""
 echo "Hold me."
 echo ""
 echo ""
 echo ""
 exit 1
fi
NUMBER=$RANDOM
FILE="MCE$NUMBER.sh"
if [[ ! -z $( command -v qstat ) ]]; then HSTFLG=1; else HSTFLG=0; fi
if [[ $HPCFLG -eq 0 ]]; then
 cd ..
 if [[ ! -d "EXEC" ]]; then
  mkdir EXEC
  cd EXEC
 else
  cd EXEC
 fi 
 EXDIR1=$PWD    # execution folder
else
 EXDIR1="/nobackup/$LOGNAME"
fi
if [[ ! -d "$EXDIR1" ]]; then echo "Cannot find execution directory $EXDIR1. Exitting"; exit 1; fi
folseq=( `seq 1 $FOLDERS` )
cd $BUILD
if [[ HPCFLG -eq 1 ]]; then
 cp makefile_arc Makefile
 make
else
 cp makefile_chmlin Makefile
 make
fi 
cp *.exe $RUNF 
cd $RUNF
if [[ $? -ne 0 ]]; then 
 echo "Compilation Error! Exitting"
 exit 1
fi
cp input.dat input2.dat
method=`grep -i "^method" input.dat`
if [[ $? == 1 || $? == 2 ]]; then
 echo "Could not read the method from input.dat. Exitting"
 exit 1
fi
method=${method#* }
if [[ $method == "MCE12" ]]; then
   k=2
else
   k=1
fi
sed -i "s/^Repeats.*/Repeats $REPS/g" input2.dat
grep "^Repeats $REPS" input2.dat > /dev/null
if [[ $? == 1 || $? == 2 ]]; then
 echo "Could not change the number of repeats in input.dat. Exitting"
 exit 1
fi 
methseq=( `seq 1 $k` )
outfol=`grep -i "^Runfolder" input.dat`
if [[ $? == 1 || $? == 2 ]]; then
 echo "Could not read the execution folder from input.dat. Exitting"
 exit 1
fi
outfol=${outfol#* }
sys=`grep -i "^System:" input.dat`
if [[ $? == 1 || $? == 2 ]]; then
 echo "Could not read the system from input.dat. Exitting"
 exit 1
fi
sys=${sys#* }
echo $outfol | grep -i "Default" > /dev/null
outdef=$?
for a in "${methseq[@]}"; do
 if [[ $k == 2 ]]; then
  sed -i "s/^method.*/method MCEv$a/g" input2.dat
  if [[ $outdef == 0 ]]; then
   outfol2="MCEv$a-$sys-$NUMBER"
  else
   outfol2="MCEv$a-$sys-$outfol"
  fi
 else
  if [[ $outdef == 0 ]]; then
   outfol2="$method-$sys-$NUMBER"
  else
   outfol2="$method-$sys-$outfol"
  fi
 fi
 EXDIR="$EXDIR1/$outfol2"
 if [[ ! -d $EXDIR ]]; then mkdir $EXDIR; fi
 for i in "${folseq[@]}"; do
  SUBDIR="$EXDIR/$i-run"
  if [[ ! -d "$SUBDIR" ]]; then    #if directory doesn't exist
   mkdir "$SUBDIR"
  else
   cd "$SUBDIR"
   if [[ "$(ls -A )" ]]; then rm *.*; fi             #remove old run files
  fi
 done
 cd "$RUNF"
 chk=`grep "gen YES" input.dat`
 if [[ ! -z ${chk} ]]; then 
  gen=1
 else
  gen=0
 fi
 cd ../run/
 echo "#$ -cwd -V -m e" > $FILE
 if [[ $CORES -ne 1 ]]; then echo "#$ -pe smp $CORES" >> $FILE; fi
 if [[ $HPCFLG -eq 1 ]]; then echo "#$ -l h_rt=40:00:00" >> $FILE; fi
 echo "#$ -l h_vmem=2G" >> $FILE
 echo "#$ -t 1-$FOLDERS" >> $FILE
# echo "#$ -tc 40" >> $FILE
 echo "cd $EXDIR/"'$SGE_TASK_ID'"-run/" >> $FILE
 echo "echo "'"Running on $HOSTNAME in folder $PWD"' >> $FILE 
 if [[ $HPCFLG -eq 1 ]]; then
  echo "module load mkl" >> $FILE
 fi
 echo "./MCE.exe" >> $FILE
 if [[ -n $( echo $HOSTNAME | fgrep -e "chmlin451" ) ]]; then chm45=1; else chm45=0; fi
 if [[ $chm45 -eq 1 ]]; then ./gridchanger.sh; fi   ########<---------remove this
 for i in "${folseq[@]}"; do
  SUBDIR="$EXDIR/$i-run"
  cd "$RUNF"
  if [[ $chm45 -eq 1 ]]; then 
   cp ./calibinputs/input.$i $SUBDIR/input.dat     ########<----------remove this
   cp inham.dat MCE.exe prop.dat $SUBDIR/          ########<----------remove this
  else
   cp inham.dat input2.dat MCE.exe prop.dat $SUBDIR/
   mv $SUBDIR/input2.dat $SUBDIR/input.dat
  fi
  if [[ $gen -eq 0 ]]; then
   if [[ -f "Outbs-001_$i.out" ]]; then 
    echo "Outbs-001_$i.out found in $PWD"
    for x in Outbs-*_$i.out; do
     cp $x $SUBDIR/${x%_$i.out}.out
    done
   else
    echo "Outbs-001_$i.out not found in $PWD"
    echo "For propagation to occur without basis set generation, all relevant input bases must be present"
    exit 1
   fi
  fi
  if [ $HSTFLG -eq 0 ]; then
   cd $SUBDIR/
   echo "Program Executing in $EXDIR"
   ./MCE.exe #&> $FILE.o1 &
   cd $RUNF
  fi
 done
 mv $FILE $EXDIR
 cd $EXDIR
 if [[ $CORES -ne 1 ]]; then export OMP_NUM_THREADS=$CORES; fi
 if [[ $HSTFLG -eq 1 ]]; then
  qsub $FILE
 fi
 cd "$RUNF"
done
echo "./collate.sh $EXDIR $1 $3 $NUMBER "'$0' > result.sh
rm input2.dat
chmod u+x result.sh
