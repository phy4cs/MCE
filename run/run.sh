#! /bin/bash
#################################################################################################
#
#    Bash Script for Parallel Open MP execution of the MCE / CCS program            C. Symonds
#
#    To run, you must give three arguments at execution:
#       1) The number of repeats
#       2) The number of parallel threads per folder/node (max 8)
#       3) The number of folders/nodes
#
#    As there are module load commands, the script must be run as source if running on ARC1.
#    This means that for a run of 128 repeats using 8 cores per node and 4 nodes, the execution
#    command would be:
#
#    source ./run.sh 128 8 4 for ARC1, or
#
#    ./run.sh 128 8 4 elsewhere
#
#    Parallel execution is only supported currently on ARC1, ARC2 or POLARIS, as chmlin18 and chmlin45 
#    have no Open MP support. If running elsewhere than ARC1 or running a single core job on ARC1, the 
#    program is compiled without openmp flags by the compile.sh script. For portability the program is 
#    compiled using gfortran when not on ARC1, ARC2 or POLARIS. As such, any changes made to
#    the program should take this into account and endevour to utilise intrinsic functions rather
#    than intel specific or GNU specific extensions where possible. PGf95 is not currently supported
#    for compilation.
#
#    Due to the nature of Shared Memory environments, the execution of the program is split 
#    into separate folders, each one containing a separate executable file which runs on a
#    number of parallel threads defined in argument 2. Since on arc1 there are 8 cores per node,
#    this number of parallel threads is limited to a maximum of 8. Parallel execution is carried
#    out through the repeat running of the basis set propagation. As such, argument 1 (the total
#    number of repeats) must be equal to an integer multiple of 2 * threads * folders. The factor
#    of 2 originates from the propagation of a basis set followed by proagation of the complex
#    conjugate of that basis set. If however conjugate propagation is not needed, comment out lines
#    56-57 and uncomment lines 58-59 to remove the unnecessary factor of two. If gnuplot is present
#    on the computer then a set of graphs are created through the automatic creation and execution
#    of gnuplot scripts. These scripts, and the data being plotted, are generated by the avrgpops.out
#    executable file, and different plots can be generated through changing the source file of the 
#    same name. Each running of this script recompiles the program. 
#
#    If you are running with a precalculated set of basis sets, put the output files from the
#    basis set calculation in the run folder before execution and conjugate propagation should
#    be disabled.
#
#################################################################################################

grep -i "Conjugate_Repeats YES" input.dat > /dev/null
CRchk=$?
if [[ $# -ne 3 ]]; then
 echo "Error: Need to supply the number of repeats,the number of threads and the number of folders as arguments"
elif [[ "`echo $1 | egrep ^[[:digit:]]+$`" = "" ]]; then  # checks for integer
 echo "Number of runs must be an integer"
elif [[ "`echo $2 | egrep ^[[:digit:]]+$`" = "" ]]; then  # checks for integer
 echo "Number of nodes must be an integer"
elif [[ "`echo $3 | egrep ^[[:digit:]]+$`" = "" ]]; then  # checks for integer
 echo "Number of folders must be an integer"
elif [[ $1 -lt 1 ]]; then
 echo "Not enough runs selected. Must be 2 or greater"
elif [[ $2 -lt 1 ]]; then
 echo "Not enough threads selected. Must be 1 or greater"
elif [[ $2 -gt 8 ]]; then
 echo "Too many threads selected. Maximum of 8 available"
elif [[ $3 -lt 1 ]]; then
 echo "Not enough folders selected. Must be 1 or greater"
elif [[ $3 -gt 100 ]]; then
 echo "Too many folders! Maximum of 100 simultaneous job submissions allowed!"
elif [[ $(( $1/$3 )) -ge 500 ]]; then
 echo "Too many repeats per folder! Must be less than 500!"
elif [[ $(( $1%(2*$2*$3) )) -ne 0 && $CRchk == 0 ]]; then
 echo "Number of repeats must be an integer multiple of 2 * cores * folders for conjugate repetition. Check input.dat"
 echo "CRchk = $CRchk and the factor is $[2*$2*$3]"
elif [[ $(( $1%($2*$3) )) -ne 0 ]]; then
 echo "Number of repeats must be an integer multiple of cores * folders"
elif [[ $(( $2*$3 )) -gt 100 ]]; then
 echo "Total number of cores should stay below 100 unless you want to wait over a week"
else
 echo "Arguments checked"
 chk=$( echo $HOSTNAME | fgrep -e "arc1" -e "polaris" -e "arc2" )
 if [[ ! -z ${chk} ]]; then module load mkl; fi    # module loads for HPC systems
 echo "Running Starting"
 ./start.sh $1 $2 $3
fi
